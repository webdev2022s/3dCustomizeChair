/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 public/chair.gltf 
*/

import { useGLTF, useTexture } from "@react-three/drei";
import * as THREE from "three";
import { useCustomize } from "../context/CustomizeContext";

export default function Chair(props) {
  const { material, legs, chairColor, cushionColor } = useCustomize();

  const leatherCoat = useTexture({
    map: "./textures/leather/Leather_Weave_002_ambientOcclusion.jpg",
    // normalMap: "./textures/leather/Leather_Weave_002_normal.jpg",
    // roughnessMap: "./textures/leather/Leather_Weave_002_roughness.jpg",
    // aoMap: "./textures/leather/Leather_Weave_002_basecolor.jpg",
  });

  leatherCoat.map.repeat.set(3, 3);
  // leatherCoat.normalMap.repeat.set(3, 3);
  // leatherCoat.roughnessMap.repeat.set(1, 1);
  // leatherCoat.aoMap.repeat.set(3, 3);

  leatherCoat.map.wrapS = leatherCoat.map.wrapT =
    // leatherCoat.normalMap.wrapS =
    // leatherCoat.normalMap.wrapT =
    // leatherCoat.roughnessMap.wrapS =
    // leatherCoat.roughnessMap.wrapT =
    // leatherCoat.aoMap.wrapS =
    // leatherCoat.aoMap.wrapT =
    THREE.RepeatWrapping;

  const fabricCoat = useTexture({
    map: "./textures/fabric/Fabric_Lace_037_ambientOcclusion.png",
    // normalMap: "./textures/fabric/Fabric_Lace_037_normal.png",
    // roughnessMap: "./textures/fabric/Fabric_Lace_037_roughness.png",
    // aoMap: "./textures/fabric/Fabric_Lace_037_basecolor.png",
  });

  leatherCoat.map.repeat.set(5, 5);
  // leatherCoat.normalMap.repeat.set(5, 5);
  // leatherCoat.roughnessMap.repeat.set(5, 5);
  // leatherCoat.aoMap.repeat.set(5, 5);

  leatherCoat.map.wrapS = leatherCoat.map.wrapT =
    // leatherCoat.normalMap.wrapS =
    // leatherCoat.normalMap.wrapT =
    // leatherCoat.roughnessMap.wrapS =
    // leatherCoat.roughnessMap.wrapT =
    // leatherCoat.aoMap.wrapS =
    // leatherCoat.aoMap.wrapT =
    THREE.RepeatWrapping;

  const { nodes, materials } = useGLTF("/chair.gltf");
  return (
    <group {...props} dispose={null}>
      {/* <mesh geometry={nodes.Chair.geometry} material={materials.Chair} /> */}

      <mesh geometry={nodes.Chair.geometry}>
        <meshStandardMaterial
          {...(material === "leather" ? leatherCoat : fabricCoat)}
          color={chairColor}
        />
      </mesh>
      <mesh
        geometry={nodes.Cushion.geometry}
        material={materials.Cushion}
        position={[0, 0.064, 0.045]}
      >
        <meshStandardMaterial {...fabricCoat} color={cushionColor} />
      </mesh>
      <mesh
        geometry={nodes.Legs1.geometry}
        material={materials.Legs}
        visible={legs === 1}
      />
      <mesh
        geometry={nodes.Legs2.geometry}
        material={materials.Legs}
        visible={legs === 2}
      />
    </group>
  );
}

useGLTF.preload("/chair.gltf");
